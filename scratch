import pandas as pd
import numpy as np
import time

# Parameters
n = 1_000_000
repeats = 5

# Generate large test dataset
peptides = np.random.choice([
    "_HGRM(Oxidation(M))JHK_",
    "_HGRMJHK_",
    "_AGTM(Oxidation(M))PLK_",
    "_AGTPLK_",
    "_XYZM(Oxidation(M))ABC_",
    "_XYZMABC_"
], size=n, replace=True)

intensities = np.random.randint(100, 50000, size=n)

df = pd.DataFrame({
    "Peptide": peptides,
    "Intensity": intensities,
    "Intensities 2": intensities * 2,
    "Intensities 3": intensities * 3,
})
print(df.head())

# Method 1: apply + Python str.replace
def time_apply_replace():
    start = time.time()
    df["Canonical_apply"] = df["Peptide"].apply(lambda x: x.replace("M(Oxidation(M))", "M"))
    grouped = df.groupby("Canonical_apply", as_index=False).sum(numeric_only=True)
    return time.time() - start

# Method 2: pandas str.replace
def time_str_replace():
    start = time.time()
    df["Canonical_str"] = df["Peptide"].str.replace("M(Oxidation(M))", "M", regex=False)
    grouped = df.groupby("Canonical_str", as_index=False).sum(numeric_only=True)
    return time.time() - start

# Run benchmarks
apply_times = []
str_replace_times = []

for _ in range(repeats):
    apply_times.append(time_apply_replace())
    str_replace_times.append(time_str_replace())

# Print results
print(f"\nAverage time using apply + replace: {sum(apply_times)/repeats:.4f} seconds")
print(f"Average time using str.replace:     {sum(str_replace_times)/repeats:.4f} seconds")

# Validate final result equivalence
identical = (df["Canonical_apply"] == df["Canonical_str"]).all()
print(f"Results identical?                  {identical}")
