import os
import sys
import logging
import argparse
from pathlib import Path
from typing import List, Union

import topas_pipeline.config as config
from topas_pipeline.TOPAS_kinase_scoring import kinase_scoring
from topas_pipeline.TOPAS_protein_phosphorylation_scoring import protein_phospho_scoring
import topas_pipeline.TOPAS_scoring_functions as scoring


# hacky way to get the package logger instead of just __main__ when running as a module
logger = logging.getLogger(__package__ + "." + Path(__file__).stem)


def psite_scoring(
    results_folder: Union[str, Path],
    extra_kinase_annot: Union[str, Path],
    data_types: List[str],
):
    """Creates tables with drug, kinase and protein phosphorylation scores
    Requires that preprocessed_{data_type}.csv is generated by preprocess.py
    Requires that [phospho|full_proteome]_z.csv files are generated by metrics.py
    """
    logger.info("Running psite scoring module")
    if "pp" not in data_types:
        logger.info(f"Psite scoring skipped - no phospho data available")
        return

    # we are removing prefix pat_? where and why? do we not maybe want to keep it.. yes when we do a proper report creation

    preprocessed_df = scoring.topas_score_preprocess(results_folder)

    kinase_results_folder = os.path.join(results_folder, "kinase_results")

    # TODO: fix this, this is not good coding practice...
    extra_kinase_annot_bool = False
    if len(str(extra_kinase_annot)) > 0:
        extra_kinase_annot_bool = True
    kinase_scoring(kinase_results_folder, preprocessed_df, extra_kinase_annot_bool)
    protein_phospho_scoring(results_folder, preprocessed_df)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-c", "--config", required=True, help="Absolute path to configuration file."
    )
    args = parser.parse_args(sys.argv[1:])

    configs = config.load(args.config)
    psite_scoring(configs.results_folder, configs.data_types)
