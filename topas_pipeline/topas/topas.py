import sys
import os
import logging
from pathlib import Path
from typing import Union

import pandas as pd

from .. import metrics, sample_metadata
from . import annotation as topas_annotation
from . import scoring
from . import protein_phosphorylation
from . import rtk_substrate_phosphorylation as rtk_scoring

# hacky way to get the package logger instead of just __main__ when running as a module
logger = logging.getLogger(__package__ + "." + __file__)

TOPAS_CATEGORIES = {
    "ALK": "RTK",
    "AXL": "RTK",
    "DDR1": "RTK",
    "DDR2": "RTK",
    "EGFR": "RTK",
    "ERBB2": "RTK",
    # "ERBB3": "RTK",
    "FGFR1": "RTK",
    "FGFR2": "RTK",
    "FGFR4": "RTK",
    "FLT1": "RTK",
    "FLT4": "RTK",
    # "INSR": "RTK",
    "KDR": "RTK",
    "KIT": "RTK",
    # "MERTK": "RTK",
    "NTRK2": "RTK",
    "NTRK3": "RTK",
    "PDGFRA": "RTK",
    "PDGFRB": "RTK",
    "IGF1R": "RTK",
    "EPHA2": "RTK",
    "RET": "RTK",
    "MET": "RTK",
    #'Proximal RTK signaling': 'downstream signaling',
}


def compute_topas_scores(
    results_folder: Union[str, Path],
    metadata_file: Union[str, Path],
    topas_annotation_file: Union[str, Path],
    topas_results_folder: str = "topas_scores",
) -> None:
    """
    Computes TOPAS subscores and TOPAS scores
    Requires that
    - [phospho|full_proteome]_z.csv files are generated by metrics.py
    - protein_results/protein_scores.tsv is generated by topas.protein_phosphorylation.py
    - kinase_results/kinase_scores.tsv is generated by topas.substrate_phosphorylation.py
    """
    logger.info("Running TOPAS scoring module")
    if os.path.exists(
        os.path.join(results_folder, topas_results_folder, "topas_rtk_scores.tsv")
    ):
        logger.info(f"TOPAS scoring skipped - found files already preprocessed")
        return

    topas_annotation_df = topas_annotation.read_topas_annotations(topas_annotation_file)
    topas_annotation_df = topas_annotation_df[topas_annotation_df["group"] != "OTHER"]

    z_scores_fp_df = scoring.load_z_scores_fp(results_folder)
    z_scores_pp_df = None # scoring.load_z_scores_pp(results_folder) # no longer used
    protein_phosphorylation_df = protein_phosphorylation.load_protein_phosphorylation(
        results_folder, remove_multi_gene_groups=True
    )
    kinase_scores_df = rtk_scoring.load_substrate_phosphorylation(results_folder)

    # remove phosphoprotein groups which are a result of shared peptides
    protein_phosphorylation_df = protein_phosphorylation_df.loc[
        ~protein_phosphorylation_df.index.str.contains(";")
    ]

    calculate_topas_subscore = scoring.get_topas_subscore_calculator(
        z_scores_fp_df, z_scores_pp_df, protein_phosphorylation_df, kinase_scores_df
    )

    topas_scores_dict = {}
    for topas_name, topas_score_annotation_df in topas_annotation_df.groupby(
        "TOPAS_score"
    ):
        logger.info(f"Calculating TOPAS scores for {topas_name}")
        topas_subscores = {}
        for (
            topas_subscore_name,
            topas_subscore_annotation_df,
        ) in topas_score_annotation_df.groupby("TOPAS_subscore_level"):
            topas_subscore = calculate_topas_subscore(topas_subscore_annotation_df)
            topas_subscores[f"{topas_name} - {topas_subscore_name}"] = topas_subscore

        topas_subscores_df = pd.DataFrame.from_dict(topas_subscores)
        topas_subscores_df[f"{topas_name}_total_basket_score"] = topas_subscores_df.sum(
            axis=1
        )
        topas_scores_dict[topas_name] = topas_subscores_df[
            f"{topas_name}_total_basket_score"
        ]
        topas_subscores_output_file = os.path.join(
            results_folder,
            topas_results_folder,
            f'subbasket_scores_{topas_name.replace("/", "_").replace(" ", "_")}.tsv',
        )
        topas_subscores_df.index.name = "index"
        topas_subscores_df.to_csv(
            topas_subscores_output_file, sep="\t", float_format="%.4g"
        )

        # apply second-level z-scoring per basket (i.e. per column)
        # topas_subscores_df = topas_subscores_df.apply(zscore)
        # topas_subscore_output_file_zscored = os.path.join(
        #     results_folder,
        #     topas_results_folder,
        #     f'subbasket_scores_{topas_name.replace("/", "_").replace(" ", "_")}_zscored.tsv',
        # )
        # topas_subscores_df.to_csv(
        #     topas_subscore_output_file_zscored, sep="\t", index=False, float_format="%.4g"
        # )

        logger.info(
            f"Written TOPAS results for {topas_name} to: {topas_subscores_output_file}"
        )

    topas_scores_df = pd.DataFrame.from_dict(topas_scores_dict)
    save_topas_scores(
        topas_scores_df,
        os.path.join(results_folder, topas_results_folder, "topas_rtk_scores.tsv"),
    )

    topas_scores_df = topas_scores_df.drop(
        topas_scores_df[topas_scores_df.index.str.startswith("targets")].index
    )
    measures = metrics.get_metrics(topas_scores_df.T)
    measures["z-score"].columns = measures["z-score"].columns.str.strip("zscore_")
    zscores = measures["z-score"].T

    save_topas_scores(
        zscores,
        os.path.join(
            results_folder, topas_results_folder, "topas_rtk_scores_zscored.tsv"
        ),
    )

    # TODO: can we do without the metadata file, since we only use code_oncotree
    if os.path.isfile(metadata_file):
        metadata_df = sample_metadata.load(metadata_file)
        save_rtk_scores_w_metadata(
            zscores, metadata_df, os.path.join(results_folder, "topas_scores", "rtk_landscape.tsv")
        )


def save_rtk_scores_w_metadata(
    topas_scores_df: pd.DataFrame, metadata_df: pd.DataFrame, out_file: str
) -> None:
    # subset to RTK using TOPAS_CATEGORIES keys and then map metadata
    topas_scores_df = topas_scores_df.loc[
        :, topas_scores_df.columns.isin(TOPAS_CATEGORIES.keys())
    ]
    if "code_oncotree" in metadata_df.columns:
        topas_scores_df = map_index_to_df(topas_scores_df, metadata_df)
        topas_scores_df = topas_scores_df.set_index("Sample name")

        # topas_scores_df = topas_scores_df.rename(index=lambda x: x.replace("score_", ""))
        topas_scores_df.index.name = "Sample name"
    topas_scores_df = topas_scores_df.fillna(0)
    topas_scores_df.to_csv(out_file, sep="\t", float_format="%.4g")


def map_index_to_df(df1, df2):
    # Step 1: Remove prefix "pre_" from the index of df1, if it exists
    df1_index = df1.index.str.replace("^pat_", "", regex=True)

    # Step 2: Use the cleaned index to merge df1 with df2 on 'sample' and 'batch'
    merged_df = df1.copy()
    merged_df.index = df1_index  # Replace index in df1 with cleaned index

    # Perform the mapping: merge df1 and df2 on the index and 'batch'
    result_df = merged_df.merge(
        df2[["Sample name", "code_oncotree"]],
        left_on=[merged_df.index],
        right_on=["Sample name"],
        how="left",
    )
    return result_df


def save_topas_scores(topas_scores_df: pd.DataFrame, out_file: str):
    topas_scores_df = topas_scores_df.rename(index=lambda x: x.replace("score_", ""))
    topas_scores_df.index.name = "Sample"
    topas_scores_df = topas_scores_df.fillna(0)
    topas_scores_df.to_csv(out_file, sep="\t", float_format="%.4g")


def read_topas_scores(
    results_folder: Union[str, Path],
    z_scored: bool = False,
) -> pd.DataFrame:
    """
    Read TOPAS score results for report creation
    Requires one of [basket_scores_4th_gen.tsv|basket_scores.tsv]
    """
    z_scored_suffix = ""
    if z_scored:
        z_scored_suffix = "_zscored"

    for topas_score_file_name in [
        f"basket_scores_4th_gen{z_scored_suffix}.tsv",
        "basket_scores{z_scored_suffix}.tsv",
    ]:
        topas_scores_file_path = os.path.join(results_folder, topas_score_file_name)
        if not os.path.exists(topas_scores_file_path):
            continue

        try:
            topas_scores_df = pd.read_csv(
                topas_scores_file_path, sep="\t", index_col="Sample"
            )
        except PermissionError:
            raise PermissionError(
                f"Cannot open TOPAS scores file, check if you have it open in Excel. {topas_scores_file_path}"
            )

        return topas_scores_df.T

    raise FileNotFoundError("No TOPAS score file found")


def save_topas_scores_long_format(topas_scores_df: pd.DataFrame, out_file: str):
    topas_names = topas_scores_df.columns[
        topas_scores_df.columns != "Sample"
    ].values.tolist()
    topas_scores_df_long = pd.melt(
        topas_scores_df.reset_index(), id_vars="Sample", value_vars=topas_names
    )
    topas_scores_df_long["Data type"] = [
        "FP" if "FP" in variable else "PP"
        for variable in topas_scores_df_long["variable"]
    ]
    topas_scores_df_long["Basket type"] = [
        "RTK" if "RTK Scores" in variable else "Main"
        for variable in topas_scores_df_long["variable"]
    ]
    topas_scores_df_long = topas_scores_df_long.loc[
        ~topas_scores_df_long["variable"].str.contains("TOPAS Drug"), :
    ]
    topas_scores_df_long["variable"] = (
        topas_scores_df_long["variable"].str.split(".").str.get(-1)
    )
    topas_scores_df_long.to_csv(out_file, sep="\t", float_format="%.4g")


if __name__ == "__main__":
    import argparse

    from .. import config

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-c", "--config", required=True, help="Absolute path to configuration file."
    )
    parser.add_argument(
        "-b",
        "--topas_results_folder",
        default="",
        help="Relative path to TOPAS results folder inside the results folder.",
    )
    args = parser.parse_args(sys.argv[1:])

    configs = config.load(args.config)
    # Create results folder and save configurations
    os.makedirs(
        os.path.join(configs.results_folder, args.topas_results_folder),
        exist_ok=True,
    )

    compute_topas_scores(
        configs.results_folder,
        topas_annotation_file=configs.clinic_proc.prot_baskets,
        metadata_file=configs.metadata_annotation,
        topas_results_folder=args.topas_results_folder,
    )
