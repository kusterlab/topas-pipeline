import os
import sys
import logging
import argparse
from pathlib import Path
from typing import List, Union


import pandas as pd

from .. import config
from . import substrate_phosphorylation
from . import protein_phosphorylation
import topas_pipeline.topas.scoring as scoring


# hacky way to get the package logger instead of just __main__ when running as a module
logger = logging.getLogger(__package__ + "." + Path(__file__).stem)


def psite_scoring(
    results_folder: Union[str, Path],
    data_types: List[str],
    extra_kinase_annot: Union[str, Path] = "",
):
    """Creates tables with drug, kinase and protein phosphorylation scores
    Requires that preprocessed_{data_type}.csv is generated by preprocess.py
    Requires that [phospho|full_proteome]_z.csv files are generated by metrics.py
    """
    logger.info("Running psite scoring module")
    if "pp" not in data_types:
        logger.info(f"Psite scoring skipped - no phospho data available")
        return

    concatenate_psp_and_extra_kinases = False
    if len(str(extra_kinase_annot)) > 0:
        concatenate_psp_and_extra_kinases = True

    preprocessed_df = scoring.topas_score_preprocess(
        results_folder, concatenate_psp_and_extra_kinases
    )

    kinase_results_folder = os.path.join(results_folder, "kinase_results")

    substrate_phosphorylation.kinase_scoring(kinase_results_folder, preprocessed_df)
    protein_phosphorylation.protein_phospho_scoring(results_folder, preprocessed_df)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-c", "--config", required=True, help="Absolute path to configuration file."
    )
    args = parser.parse_args(sys.argv[1:])

    configs = config.load(args.config)
    psite_scoring(configs.results_folder, configs.data_types, configs.clinic_proc.extra_kinase_annot)


def get_paths_to_topas_subscore_files(results_folder):
    files = [
        filename
        for filename in os.listdir(results_folder)
        if filename.startswith("subbasket_scores")
    ]
    return files


def read_topas_subscores(results_folder: Union[str, Path]) -> pd.DataFrame:
    """
    Read TOPAS subscore results for report creation
    Requires one of [basket_scores_4th_gen.tsv|basket_scores.tsv]
    """
    topas_subscore_files = get_paths_to_topas_subscore_files(results_folder)
    # read in df and combine
    list_dfs = []
    for file in topas_subscore_files:
        topas_subscore_file = os.path.join(results_folder, file)
        if os.path.exists(topas_subscore_file):
            try:
                df = pd.read_csv(topas_subscore_file, sep="\t", index_col="index")
            except PermissionError:
                raise PermissionError(
                    f"Cannot open TOPAS subscores file, check if you have it open in Excel. {topas_subscore_file}"
                )
        else:
            raise FileNotFoundError(
                f"TOPAS subscore file not found. {topas_subscore_file}"
            )
        df = df.drop(
            df.loc[:, df.columns.str.contains("total_basket_score")],
            axis=1,
        )
        list_dfs.append(df.transpose())
    list_dfs = [df.loc[:, ~df.columns.duplicated(keep="first")] for df in list_dfs]
    topas_subscores_df = pd.concat(list_dfs)
    return topas_subscores_df
